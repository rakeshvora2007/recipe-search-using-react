{"version":3,"sources":["containers/Recipe/RecipeList/RecipeList.module.css","containers/Recipe/Recipe.module.css","config/Keys.js","containers/Search/Search.js","containers/Recipe/RecipeList/RecipeList.js","containers/Recipe/Recipe.js","components/Reusables/Loading.jsx","App.js","serviceWorker.js","index.js","containers/Search/Search.module.css","App.module.css"],"names":["module","exports","APP_CONFIG","Search","props","useState","searchTerm","setSearchTerm","getRecipes","query","fxn","a","fetch","response","json","data","setError","className","styles","form","onSubmit","e","preventDefault","setLoading","listOfRecipes","handleRecipesUpdate","hits","alert","searchContainer","type","value","placeholder","inputText","onChange","target","searchButton","searchIcon","RecipeList","image","label","ingredientLines","calories","recipeItem","recipeImageContainer","src","alt","recipeImage","header","recipeItemTitle","Math","round","ingredientsContainer","recipeIngridientList","map","line","index","key","Recipe","recipeList","recipeItems","recipe","id","cautions","dietLabels","healthLabels","ingredients","shareAs","source","totalWeight","Loading","css","override","size","loading","App","setRecipeList","error","appCover","length","intialMessage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.46b8c4cd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipeImageContainer\":\"RecipeList_recipeImageContainer__32Thu\",\"recipeImage\":\"RecipeList_recipeImage__1_9mK\",\"recipeItem\":\"RecipeList_recipeItem__1mi2A\",\"recipeItemTitle\":\"RecipeList_recipeItemTitle__2aawd\",\"ingredientsContainer\":\"RecipeList_ingredientsContainer__1f5ft\",\"recipeIngridientList\":\"RecipeList_recipeIngridientList__2nnq_\",\"header\":\"RecipeList_header__kkSSo\",\"calories\":\"RecipeList_calories__7Kb2h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipeItems\":\"Recipe_recipeItems__3QlTm\"};","export const APP_CONFIG = {\r\n    APP_KEY : \"47917384468320448300563bfe49943c\",\r\n    APP_ID : \"591aa938\"\r\n}","import React, { useState } from \"react\";\r\nimport { APP_CONFIG } from \"../../config/Keys\";\r\nimport styles from \"./Search.module.css\";\r\n\r\nexport const Search = props => {\r\n  let [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n  const getRecipes = async (query, fxn) => {\r\n    try {\r\n      const response = await fetch(\r\n        `https://api.edamam.com/search?q=${query}&app_id=${\r\n        APP_CONFIG.APP_ID\r\n        }&app_key=${APP_CONFIG.APP_KEY}`\r\n      );\r\n      const data = await response.json();\r\n      fxn(data);\r\n    } catch (error) {\r\n      props.setError(\"Maximum number of request allowed in a minute hit!!. Please wait few seconds and try again\");\r\n    }\r\n  };\r\n\r\n  const onSearch = e => {\r\n    e.preventDefault();\r\n    if (searchTerm !== \"\") {\r\n      props.setError(\"\");\r\n      props.setLoading(true);\r\n      getRecipes(searchTerm, listOfRecipes => {\r\n        props.setLoading(false);\r\n        props.handleRecipesUpdate(listOfRecipes.hits);\r\n      });\r\n    } else {\r\n      alert(\"Please enter a value before hitting submit button\");\r\n    }\r\n  };\r\n\r\n  const onChangeSearchTerm = value => {\r\n    setSearchTerm(value);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.form}>\r\n      <form onSubmit={onSearch}>\r\n        <div className={styles.searchContainer}>\r\n          <input\r\n            type=\"text\"\r\n            value={searchTerm}\r\n            placeholder=\"Enter Ingredient\"\r\n            className={styles.inputText}\r\n            onChange={e => onChangeSearchTerm(e.target.value)}\r\n          />\r\n          <button type=\"submit\" value=\"Submit\" className={styles.searchButton}>\r\n            <span className={styles.searchIcon}></span>\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport styles from './RecipeList.module.css'\r\n\r\nexport const RecipeList = ({ image, label, ingredientLines, calories }) => {\r\n    return (\r\n        <div className={styles.recipeItem}>\r\n            \r\n            <div className={styles.recipeImageContainer}>\r\n                <img src={image} alt=\"\" className={styles.recipeImage} />\r\n            </div>\r\n            <div className={styles.header}>\r\n                <div className={styles.recipeItemTitle}>{label} <sup className={styles.calories}>{Math.round(calories)} Cal</sup></div>\r\n            </div>\r\n            <div className={styles.ingredientsContainer}>\r\n                <ul className={styles.recipeIngridientList}>{ingredientLines.map((line, index) => {\r\n                    return <li key={index}>{line}</li>\r\n                })}</ul>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport {RecipeList} from './RecipeList/RecipeList';\r\nimport styles from './Recipe.module.css'\r\n\r\nexport const Recipe = ({recipeList}) => {\r\n    return(\r\n        <div className={styles.recipeItems}>\r\n            {recipeList.map(recipe => {\r\n               recipe = recipe.recipe; \r\n               return <RecipeList\r\n                key={recipe.label}\r\n                id={recipe.label}\r\n                label={recipe.label}\r\n                calories={recipe.calories}\r\n                cautions={recipe.cautions}\r\n                dietLabels={recipe.dietLabels}\r\n                healthLabels={recipe.healthLabels}\r\n                ingredients={recipe.ingredients}\r\n                shareAs={recipe.shareAs}\r\n                source={recipe.source}\r\n                totalWeight={recipe.totalWeight}\r\n                image={recipe.image}\r\n                ingredientLines={recipe.ingredientLines}\r\n                />\r\n            })}\r\n        </div>\r\n    );\r\n}  ","import React from \"react\";\r\nimport { css } from \"@emotion/core\";\r\nimport BeatLoader from \"react-spinners/BeatLoader\";\r\n\r\nexport const Loading = () => {\r\n  return (\r\n    <div className=\"sweet-loading\">\r\n      <BeatLoader\r\n        css={override}\r\n        size={80}\r\n        loading={true}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\n// Can be a string as well. Need to ensure each key-value pair ends with ;\r\nconst override = css`\r\n  width: 800px;\r\n  text-align: center;\r\n  margin: 20px auto;\r\n  padding: 50px; \r\n  border-color: red;\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { Search } from \"./containers/Search/Search\";\r\nimport { Recipe } from \"./containers/Recipe/Recipe\";\r\nimport styles from './App.module.css';\r\nimport { Loading } from \"./components/Reusables/Loading\";\r\n\r\nfunction App() {\r\n  let [recipeList, setRecipeList] = useState([]);\r\n  let [loading, setLoading] = useState(false);\r\n  let [error, setError] = useState(\"\");\r\n\r\n\r\n  const handleRecipesUpdate = (value) => {\r\n    setRecipeList(value);\r\n  }\r\n\r\n  return (\r\n    <div className={styles.appCover}>\r\n      <Search handleRecipesUpdate={handleRecipesUpdate} setLoading={setLoading} setError={setError}/>\r\n\r\n      {\r\n        error ?\r\n        <div className={styles.error}>{error}</div>\r\n        :\r\n        loading ?\r\n          <Loading />\r\n          :\r\n          recipeList.length ?\r\n            <Recipe recipeList={recipeList} />\r\n            :\r\n            <div className={styles.intialMessage}>\r\n              Start Finding the Recipes you like\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputText\":\"Search_inputText__3MpmQ\",\"form\":\"Search_form__3PKFm\",\"searchContainer\":\"Search_searchContainer__34-dK\",\"searchButton\":\"Search_searchButton__37My4\",\"searchIcon\":\"Search_searchIcon__1GIbE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appCover\":\"App_appCover__2vNoz\",\"intialMessage\":\"App_intialMessage__3WQIU\",\"error\":\"App_error__w__Xr\"};"],"sourceRoot":""}