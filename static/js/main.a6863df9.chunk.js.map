{"version":3,"sources":["containers/Recipe/RecipeList/RecipeList.module.css","containers/Search/Search.module.css","containers/Recipe/Recipe.module.css","App.module.css","config/Keys.js","containers/Search/Search.js","containers/Recipe/RecipeList/RecipeList.js","containers/Recipe/Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","recipeImage","recipeItem","recipeIngridientList","inputText","inputSubmit","form","recipeItems","appCover","APP_CONFIG","Search","props","_useState","useState","_useState2","Object","slicedToArray","searchTerm","setSearchTerm","getRecipes","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","query","fxn","response","data","wrap","_context","prev","next","fetch","concat","sent","json","stop","_x","_x2","apply","this","arguments","react_default","createElement","className","styles","onSubmit","e","preventDefault","console","log","listOfRecipes","handleRecipesUpdate","hits","alert","type","value","placeholder","onChange","target","RecipeList","image","label","ingredientLines","calories","recipeItemTitle","src","alt","map","line","index","key","Recipe","recipeList","recipe","RecipeList_RecipeList","id","cautions","dietLabels","healthLabels","ingredients","shareAs","source","totalWeight","App","setRecipeList","Search_Search","Recipe_Recipe","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a6863df9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipeImage\":\"RecipeList_recipeImage__RfNwa\",\"recipeItem\":\"RecipeList_recipeItem__1hDGW\",\"recipeIngridientList\":\"RecipeList_recipeIngridientList__nOvyC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputText\":\"Search_inputText__30knd\",\"inputSubmit\":\"Search_inputSubmit__qoS8A\",\"form\":\"Search_form__2dY5z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipeItems\":\"Recipe_recipeItems__X4lIQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appCover\":\"App_appCover__3cbNK\"};","\nexport const APP_CONFIG = {\n    APP_KEY : \"47917384468320448300563bfe49943c\",\n    APP_ID : \"591aa938\"\n}","import React, { /* useEffect, */ useState } from \"react\";\nimport { APP_CONFIG } from \"../../config/Keys\";\nimport styles from \"./Search.module.css\";\n\nexport const Search = props => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  // const [recipes, setRecipes] = useState([]);\n\n  /* useEffect(() => {\n        getRecipes()\n    }, []); */\n\n  const getRecipes = async (query, fxn) => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${\n        APP_CONFIG.APP_ID\n      }&app_key=${APP_CONFIG.APP_KEY}`\n    );\n    const data = await response.json();\n    fxn(data);\n  };\n\n  const onSearch = e => {\n    e.preventDefault();\n    console.log(searchTerm);\n    if (searchTerm !== \"\") {\n      getRecipes(searchTerm, listOfRecipes => {\n        // setRecipes(listOfRecipes);\n        setSearchTerm(\"\");\n        props.handleRecipesUpdate(listOfRecipes.hits);\n      });\n    } else {\n      alert(\"Please enter a value before hitting submit button\");\n    }\n  };\n\n  const onChangeSearchTerm = value => {\n    setSearchTerm(value);\n  };\n\n  return (\n    <div className={styles.form}>\n      <form onSubmit={onSearch}>\n        <input\n          type=\"text\"\n          value={searchTerm}\n          placeholder=\"Search\"\n          className={styles.inputText}\n          onChange={e => onChangeSearchTerm(e.target.value)}\n        />\n        <input type=\"submit\" value=\"Submit\" className={styles.inputSubmit}/>\n      </form>\n    </div>\n  );\n};\n","import React from 'react';\nimport styles from './RecipeList.module.css'\n\nexport const RecipeList = ({image, label, ingredientLines, calories}) => {\n    return (\n        <div className={styles.recipeItem}>\n            <h3 className={styles.recipeItemTitle}>{label}</h3>\n            <img src={image} alt=\"\" className={styles.recipeImage}/>\n            <ul className={styles.recipeIngridientList}>{ingredientLines.map((line, index) => {\n                return <li key={index}>{line}</li>\n            })}</ul>\n            <h3>Calories: {calories}</h3>\n        </div>\n    );\n}","import React from 'react';\nimport {RecipeList} from './RecipeList/RecipeList';\nimport styles from './Recipe.module.css'\n\nexport const Recipe = ({recipeList}) => {\n    return(\n        <div className={styles.recipeItems}>\n            {console.log(recipeList)}\n            {recipeList.map(recipe => {\n               recipe = recipe.recipe; \n               return <RecipeList\n                key={recipe.label}\n                id={recipe.label}\n                label={recipe.label}\n                calories={recipe.calories}\n                cautions={recipe.cautions}\n                dietLabels={recipe.dietLabels}\n                healthLabels={recipe.healthLabels}\n                ingredients={recipe.ingredients}\n                shareAs={recipe.shareAs}\n                source={recipe.source}\n                totalWeight={recipe.totalWeight}\n                image={recipe.image}\n                ingredientLines={recipe.ingredientLines}\n                />\n            })}\n        </div>\n    );\n}  ","import React, {useState} from 'react';\nimport {Search} from \"./containers/Search/Search\";\nimport {Recipe} from \"./containers/Recipe/Recipe\";\nimport styles from './App.module.css';\n\nfunction App() {\n const [recipeList, setRecipeList] = useState([]);\n\n  const handleRecipesUpdate = (value) => {\n    setRecipeList(value);\n  }\n\n  return (\n    <div className={styles.appCover}>\n      <Search handleRecipesUpdate={handleRecipesUpdate}/>\n      <Recipe recipeList={recipeList}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}